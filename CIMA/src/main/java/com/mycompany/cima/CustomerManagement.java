/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.cima;

import java.awt.Color;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author HP
 */
public class CustomerManagement extends javax.swing.JFrame {
    private ArrayList<Customers> list;
    DefaultTableModel model;
    private int selectedIndex ;
    
    public ArrayList<Customers> getCustomerList() {
        return this.list;
    }
    public CustomerManagement() {
        initComponents();
        this.setLocationRelativeTo(null);
        list = new ArrayList<>();
        model = (DefaultTableModel) ListCustomer.getModel();
        DocFile();
        ShowResult();
        quanlity.setText(String.valueOf(list.size()));
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel15 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ListCustomer = new javax.swing.JTable();
        txtSdt = new javax.swing.JTextField();
        lblId = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        txtDoB = new javax.swing.JTextField();
        txtDoS = new javax.swing.JTextField();
        txtAddress = new javax.swing.JTextField();
        AddCustomer = new javax.swing.JButton();
        RemoveCustomer = new javax.swing.JButton();
        UpdateCustomer = new javax.swing.JButton();
        FindCustomer = new javax.swing.JButton();
        SortDoS = new javax.swing.JCheckBox();
        SortBoB = new javax.swing.JCheckBox();
        Break = new javax.swing.JButton();
        txtName = new javax.swing.JTextField();
        txtId = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtGt = new javax.swing.JComboBox<>();
        Reset = new javax.swing.JButton();
        txtId2 = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        ClearSelected = new javax.swing.JButton();
        Idmessage = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        lblEmail = new javax.swing.JLabel();
        lblDoS = new javax.swing.JLabel();
        lblDoB = new javax.swing.JLabel();
        lblSdt = new javax.swing.JLabel();
        lblIdMes = new javax.swing.JLabel();
        quanlity = new javax.swing.JTextField();

        jLabel15.setFont(new java.awt.Font("Segoe UI Variable", 0, 10)); // NOI18N
        jLabel15.setText("__");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Customers Infomation Management");

        jLabel1.setText("Thêm Thông Tin Khách Hàng");

        ListCustomer.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Name", "Số Điện Thoại", "Ngày Sinh", "Ngày Đăng Kí"
            }
        ));
        jScrollPane1.setViewportView(ListCustomer);
        if (ListCustomer.getColumnModel().getColumnCount() > 0) {
            ListCustomer.getColumnModel().getColumn(0).setMinWidth(10);
            ListCustomer.getColumnModel().getColumn(0).setPreferredWidth(20);
            ListCustomer.getColumnModel().getColumn(0).setMaxWidth(40);
            ListCustomer.getColumnModel().getColumn(1).setMinWidth(50);
            ListCustomer.getColumnModel().getColumn(1).setPreferredWidth(70);
            ListCustomer.getColumnModel().getColumn(1).setMaxWidth(100);
            ListCustomer.getColumnModel().getColumn(2).setMinWidth(50);
            ListCustomer.getColumnModel().getColumn(2).setPreferredWidth(70);
            ListCustomer.getColumnModel().getColumn(2).setMaxWidth(100);
            ListCustomer.getColumnModel().getColumn(3).setMinWidth(50);
            ListCustomer.getColumnModel().getColumn(3).setPreferredWidth(140);
            ListCustomer.getColumnModel().getColumn(3).setMaxWidth(150);
            ListCustomer.getColumnModel().getColumn(4).setMinWidth(50);
            ListCustomer.getColumnModel().getColumn(4).setPreferredWidth(140);
            ListCustomer.getColumnModel().getColumn(4).setMaxWidth(150);
        }

        lblId.setText("Id");

        jLabel3.setText("Email");

        jLabel4.setText("Ngày Đăng Kí");

        jLabel5.setText("Ngày Sinh");

        jLabel6.setText("Tên");

        jLabel7.setText("Giới Tính");

        jLabel8.setText("Địa Chỉ");

        jLabel9.setText("Số Điện Thoại");

        AddCustomer.setText("Thêm");
        AddCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddCustomerActionPerformed(evt);
            }
        });

        RemoveCustomer.setText("Xóa");
        RemoveCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveCustomerActionPerformed(evt);
            }
        });

        UpdateCustomer.setText("Sửa");
        UpdateCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateCustomerActionPerformed(evt);
            }
        });

        FindCustomer.setText("Chi Tiết");
        FindCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FindCustomerActionPerformed(evt);
            }
        });

        SortDoS.setText("Sắp xếp theo ngày đăng kí");
        SortDoS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SortDoSActionPerformed(evt);
            }
        });

        SortBoB.setText("Sắp xếp theo ngày sinh");
        SortBoB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SortBoBActionPerformed(evt);
            }
        });

        Break.setText("Thoát");
        Break.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BreakActionPerformed(evt);
            }
        });

        jLabel11.setText("Nhập Id");

        txtGt.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nam", "Nữ ", "Khác" }));
        txtGt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtGtActionPerformed(evt);
            }
        });

        Reset.setText("Reset");
        Reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetActionPerformed(evt);
            }
        });

        txtId2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtId2ActionPerformed(evt);
            }
        });

        jLabel13.setText("Chọn dòng");

        ClearSelected.setText("Hủy Chọn Dòng");
        ClearSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearSelectedActionPerformed(evt);
            }
        });

        Idmessage.setFont(new java.awt.Font("Segoe UI Variable", 0, 10)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        jLabel2.setText("name@gmail.com");

        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        jLabel10.setText("dd/mm/yyyy");

        jLabel12.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        jLabel12.setText("dd/mm/yyyy");

        jLabel14.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        jLabel14.setText("0XXXXXXXXX");

        lblEmail.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N

        lblDoS.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N

        lblDoB.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N

        lblSdt.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N

        lblIdMes.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N

        quanlity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quanlityActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Idmessage)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Reset, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(AddCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(SortBoB, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(SortDoS)
                        .addGap(70, 70, 70)
                        .addComponent(Break, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(80, 80, 80))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addGap(18, 18, 18)
                                .addComponent(txtAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel7))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtGt, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtDoB, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel6)
                                        .addComponent(lblId))
                                    .addGap(18, 18, 18)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(jLabel9)
                                    .addGap(18, 18, 18)
                                    .addComponent(txtSdt, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING))
                            .addComponent(lblIdMes)
                            .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblDoS, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtDoS, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblDoB, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblSdt, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(185, 185, 185)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtId2, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(42, 42, 42)
                                        .addComponent(jLabel11))))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel13)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(RemoveCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(33, 33, 33)
                                        .addComponent(UpdateCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(30, 30, 30)
                                        .addComponent(FindCustomer)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(ClearSelected))
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 542, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(quanlity, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(81, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtId2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(RemoveCustomer)
                                    .addComponent(UpdateCustomer)
                                    .addComponent(FindCustomer)
                                    .addComponent(ClearSelected))
                                .addGap(13, 13, 13)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(quanlity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblIdMes, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblId))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtSdt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblSdt, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Idmessage, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel8))
                                .addGap(23, 23, 23)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtGt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtDoB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5))
                                .addGap(1, 1, 1)
                                .addComponent(lblDoB, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtDoS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4))))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblDoS, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SortDoS)
                    .addComponent(SortBoB)
                    .addComponent(Break)
                    .addComponent(Reset)
                    .addComponent(AddCustomer))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BreakActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BreakActionPerformed
        try{
            FileWriter fw = new FileWriter("CIMA.txt");
            BufferedWriter bw = new BufferedWriter(fw);
            for(Customers s : list){
                bw.write(s.toString());
                bw.newLine();
            }
            bw.close();
            fw.close();
        }catch(Exception e){
            
        }
        System.exit(0);
    }//GEN-LAST:event_BreakActionPerformed

    private void txtGtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtGtActionPerformed
        
    }//GEN-LAST:event_txtGtActionPerformed

    public static boolean validateAndCheckDate(String dateString) {
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        dateFormat.setLenient(false); 
        
        try {
            Date date = dateFormat.parse(dateString);
            int day = Integer.parseInt(dateString.substring(0, 2));
            int month = Integer.parseInt(dateString.substring(3, 5));
            int year = Integer.parseInt(dateString.substring(6));
            if (day < 1 || day > 31 || month < 1 || month > 12) {
                return false; 
            } else if (month == 2) {
                if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) {
                    if (day > 29) {
                        return false; 
                    }
                } else {
                    if (day > 28) {
                        return false; 
                    }
                }
            } else if (month == 4 || month == 6 || month == 9 || month == 11) {
                if (day > 30) {
                    return false; 
                }
            }
            
            return true;
        } catch (ParseException | NumberFormatException e) {
            return false; 
        }
    }
    public static boolean isValidEmail(String email) {
        String regex = "^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$";
        Pattern pattern = Pattern.compile(regex);
        Matcher matcher = pattern.matcher(email);
        return matcher.matches();
    }
    public static boolean isValidVietnamesePhoneNumber(String phoneNumber) {
        String regex = "(0[1-9])+([0-9]{8})\\b";
        Pattern pattern = Pattern.compile(regex);
        Matcher matcher = pattern.matcher(phoneNumber);
        return matcher.matches();
    }
    public List<Customers> DocFile(){
        try{
            FileReader fr = new FileReader("CIMA.txt");
            BufferedReader br = new BufferedReader(fr);
            String line ="";
            while(true){
                line = br.readLine();
                if(line == null){
                    break;
                }
                
                String txt[] = line.split(",");
                String name = txt[0];
                String id = txt[1];
                String email = txt[2];
                String sdt = txt[3];
                String address = txt[4];
                String Gt = txt[5];
                String DoB = txt[6];
                String DoS = txt[7]; 
                list.add(new Customers(name, id, email, sdt, address, Gt, DoB, DoS));
            }
        }catch( Exception e){
            e.printStackTrace();
        }
        return list;
    }
    private void AddCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddCustomerActionPerformed
        String difId = txtId.getText();
        String name = txtName.getText();
        String email = txtEmail.getText();
        String sdt = txtSdt.getText();
        String address = txtAddress.getText();
        String gt = (String) txtGt.getSelectedItem();
        String doB = txtDoB.getText();
        String doS = txtDoS.getText();
        
        boolean isValidDoB = validateAndCheckDate(doB);
        boolean isValidDoS = validateAndCheckDate(doS);
        boolean isValidEmail = isValidEmail(email);
        boolean isValidSdt = isValidVietnamesePhoneNumber(sdt);
        
        boolean idExists = true;
        for (int i = 0; i < list.size(); i++) {
            Customers c = list.get(i);
            if (c.getId().equals(difId) || difId.equals("")) {
                idExists = false;
                break;
            }
        }
        if(idExists == true){
            Idmessage.setText("");
            if(isValidSdt == true){
                lblSdt.setText("");
                if(isValidEmail == true){
                    lblEmail.setText("");
                     if(isValidDoB == true){
                        lblDoB.setText("");
                         if(isValidDoS == true){
                              lblDoS.setText("");
                              Customers ctm = new Customers(
                                name,
                                difId,
                                email,
                                sdt,
                                address,
                                gt,
                                doB,
                                doS
                                );
                                list.add(ctm);
                                ShowResult();
                                quanlity.setText(String.valueOf(list.size()));

                         }else{
                            lblDoS.setText("Sai cú pháp !");
                            lblDoS.setForeground(Color.red);
                            
                         }
                     }else{
                        lblDoB.setText("Sai cú pháp !");
                        lblDoB.setForeground(Color.red);
                        
                     }
                }else{
                    lblEmail.setText("Sai cú pháp !");
                    lblEmail.setForeground(Color.red);
                    
                }
            }else{
                lblSdt.setText("Sai cú pháp !");
                lblSdt.setForeground(Color.red);
                
            }
        }else{
            lblIdMes.setText("Id trống hoặc đã có !");
            lblIdMes.setForeground(Color.red);
            
        }

    }//GEN-LAST:event_AddCustomerActionPerformed

    private void ShowResult() {
        model.setRowCount(0);
        for (Customers c : list) {
            model.addRow(new Object[]{c.getId(), c.getName(),c.getSdt(),
                c.getDoB(), c.getDoS()});
        }
    }
    public void AddCustomer(Customers c) {
        list.add(c); 
        ShowResult();
        quanlity.setText(String.valueOf(list.size()));
    }
    private void ResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetActionPerformed
        txtName.setText("");
        txtId.setText("");
        txtEmail.setText("");
        txtAddress.setText("");
        txtSdt.setText("");
        txtDoB.setText("");
        txtDoS.setText("");
        txtGt.setSelectedItem(null);
    }//GEN-LAST:event_ResetActionPerformed

    private void RemoveCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveCustomerActionPerformed
        String myid = txtId2.getText();
        selectedIndex = ListCustomer.getSelectedRow();
        if(myid.equals("")){
            if(selectedIndex == -1){
                JOptionPane.showMessageDialog(rootPane,"Bạn Chưa Chọn Dòng Hoặc Chưa Nhập Id!");
            }else if(list.size() == 0){
                JOptionPane.showMessageDialog(rootPane,"Không Có Khách Hàng Nào !");
            }else{
                int[] selectedRows = ListCustomer.getSelectedRows();
                for (int i = selectedRows.length - 1; i >= 0; i--) {
                    int rowIndex = selectedRows[i];
                    model.removeRow(rowIndex);
                    list.remove(rowIndex);
                    quanlity.setText(String.valueOf(list.size()));

                }
                JOptionPane.showMessageDialog(rootPane,"Xóa Thành Công !");
            }
        }else if(!myid.equals("") && selectedIndex !=-1){
                JOptionPane.showMessageDialog(rootPane,"Vui lòng chỉ chọn id hoặc dòng !");
        }else{
             int indexRemove;
             boolean success = false;
             for(int i = 0;i < list.size();i++){
                 Customers c =list.get(i);
                 if(c.getId().equals(myid)){
                     indexRemove = i;
                     list.remove(indexRemove);
                     model.removeRow(indexRemove);
                     quanlity.setText(String.valueOf(list.size()));
                     success = true;
                     break;
                 }
             }
             if(!success){
                JOptionPane.showMessageDialog(rootPane,"Không tìm thấy Id tương ứng !"); 
             }else{
                JOptionPane.showMessageDialog(rootPane,"Xóa Thành Công !");
             }
        }
    }//GEN-LAST:event_RemoveCustomerActionPerformed

    private void UpdateCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateCustomerActionPerformed

        String id = txtId2.getText();
        selectedIndex = ListCustomer.getSelectedRow();
        if(id.equals("")){
            if(selectedIndex == -1){
                JOptionPane.showMessageDialog(rootPane,"Bạn Chưa Chọn Dòng Hoặc Chưa Nhập Id!");
            }else if(list.size() == 0){
                JOptionPane.showMessageDialog(rootPane,"Không Có Khách Hàng Nào !");
            }else{    
                UpdateCustomer uc = new UpdateCustomer(this, rootPaneCheckingEnabled);
                uc.setUpdateCustomer(list.get(selectedIndex));
                uc.setVisible(true);
            }
        }else if(!id.equals("") && selectedIndex !=-1 ){
                JOptionPane.showMessageDialog(rootPane,"Vui lòng chỉ chọn id hoặc dòng !");
        }else{
             boolean success = false;
             for(int i = 0;i < list.size();i++){
                 Customers c =list.get(i);
                 if(c.getId().equals(id)){
                     selectedIndex = i;
                     UpdateCustomer uc = new UpdateCustomer(this, rootPaneCheckingEnabled);
                     uc.setUpdateCustomer(list.get(selectedIndex));
                     uc.setVisible(true);
                     success = true;
                     break;
                 }
             }
             if(!success){
                JOptionPane.showMessageDialog(rootPane,"Không tìm thấy Id tương ứng !"); 
             }
        }
    }//GEN-LAST:event_UpdateCustomerActionPerformed

    private void FindCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FindCustomerActionPerformed
        String id = txtId2.getText();
        selectedIndex = ListCustomer.getSelectedRow();
        if(id.equals("")){
            if(selectedIndex == -1){
                JOptionPane.showMessageDialog(rootPane,"Bạn Chưa Chọn Dòng Hoặc Chưa Nhập Id!");
            }else if(list.size() == 0){
                JOptionPane.showMessageDialog(rootPane,"Không Có Khách Hàng Nào !");
            }else{    
                FindCustomer fc =  new FindCustomer(this, rootPaneCheckingEnabled);
                fc.setFindCustomer(list.get(selectedIndex));
                fc.setVisible(true);
            }
        }else if(!id.equals("") && selectedIndex !=-1 ){
                JOptionPane.showMessageDialog(rootPane,"Vui lòng chỉ chọn id hoặc dòng !");
        }else{
             boolean success = false;
             for(int i = 0;i < list.size();i++){
                 Customers c =list.get(i);
                 if(c.getId().equals(id)){
                    selectedIndex = i;
                    FindCustomer fc = new FindCustomer(this, rootPaneCheckingEnabled);
                    fc.setFindCustomer(list.get(selectedIndex));
                    fc.setVisible(true);
                    success = true;
                    break;
                 }
             }
             if(!success){
                JOptionPane.showMessageDialog(rootPane,"Không tìm thấy Id tương ứng !"); 
             }
        }
            
    }//GEN-LAST:event_FindCustomerActionPerformed
        
    private void txtId2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtId2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtId2ActionPerformed

    private void ClearSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearSelectedActionPerformed
        ListCustomer.clearSelection();
    }//GEN-LAST:event_ClearSelectedActionPerformed

    private void SortBoBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SortBoBActionPerformed
        SortDoB sdb = new SortDoB(this, rootPaneCheckingEnabled);
        sdb.setSortDoB(list);
        sdb.setVisible(true);
    }//GEN-LAST:event_SortBoBActionPerformed

    private void SortDoSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SortDoSActionPerformed
        SortDoS sds = new SortDoS(this, rootPaneCheckingEnabled);
        sds.setSortDoS(list);
        sds.setVisible(true);
    }//GEN-LAST:event_SortDoSActionPerformed

    private void quanlityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quanlityActionPerformed
        
    }//GEN-LAST:event_quanlityActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CustomerManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CustomerManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CustomerManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CustomerManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CustomerManagement().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddCustomer;
    private javax.swing.JButton Break;
    private javax.swing.JButton ClearSelected;
    private javax.swing.JButton FindCustomer;
    private javax.swing.JLabel Idmessage;
    private javax.swing.JTable ListCustomer;
    private javax.swing.JButton RemoveCustomer;
    private javax.swing.JButton Reset;
    private javax.swing.JCheckBox SortBoB;
    private javax.swing.JCheckBox SortDoS;
    private javax.swing.JButton UpdateCustomer;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblDoB;
    private javax.swing.JLabel lblDoS;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblId;
    private javax.swing.JLabel lblIdMes;
    private javax.swing.JLabel lblSdt;
    private javax.swing.JTextField quanlity;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JTextField txtDoB;
    private javax.swing.JTextField txtDoS;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JComboBox<String> txtGt;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtId2;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtSdt;
    // End of variables declaration//GEN-END:variables
    
    public void updateCustomer(Customers c) {
        list.remove(selectedIndex);
        this.AddCustomer(c);
    }
}
